## auto-execution of functions
# _precmd-vcs-info
__precmd-vcs-info() {
  vcs_info
  PROMPT_VIM_MODE_COLOR='%{[38;5;33m%}'
}
# _chpwd-ls
__chpwd-ls() {
  [[ $dirstack[1]:h != $PWD ]] && ls -F --color
}

# precmd_functions設定
precmd_functions+='__precmd-vcs-info'
# chpwd_functions設定
chpwd_functions=(chpwd_recent_dirs __chpwd-ls)

## widgets
# PROMPT_VIM_MODE_COLOR選択widgets
_zle-keymap-select() {
  case $KEYMAP in
    vicmd)
      PROMPT_VIM_MODE_COLOR="%{[38;5;87m%}"
      ;;
    main|viins)
      PROMPT_VIM_MODE_COLOR="%{[38;5;33m%}"
      ;;
  esac

  zle reset-prompt
}
zle -N zle-keymap-select _zle-keymap-select  # _zle-keymap-selectをzle-keymap-selectに設定
zle -N edit-command-line                     # コマンドラインを$EDITORで編集

## git hooks
# git管理下のディレクトリのみフック関数を呼び出すようにする
function +vi-git-hook-begin() {
  if [[ $(command git rev-parse --is-inside-work-tree 2> /dev/null) != 'true' ]]; then
    # 0以外を返すとそれ以降のフック関数は呼び出されない
    return 1
  fi

  return 0
}

function +vi-git-vcs-info-msg-setting() {
  # msgの数だけ実行されるが一度だけ実行させるため,vcs_info_msg_0_の場合のみ実行されるようにする(if文の0がmsgの数値に該当)
  if [[ $1 != 0 ]]; then
    return 0
  fi

  staged_count=${"$(git diff --cached --name-only | wc -l)"// /}
  modified_count=${"$(git ls-files --modified | wc -l)"// /}
  untracked_count=${"$(git ls-files --exclude-standard --others | wc -l)"// /}

  # hook_com[staged]が%cのフォーマット
  # hook_com[unstaged]が%uのフォーマット
  # hook_com[misc]が%mのフォーマット
  if [[ staged_count -gt 0 ]]; then
    # stagedが存在する場合は元の色を打ち消してgreenにする(modified,untrackedよりも優先)
    hook_com[staged]="%f%F{green}"
    hook_com[misc]+="%f%F{green}S: $staged_count%f "
  else
    hook_com[misc]+="S: $staged_count "
  fi

  if [[ modified_count -gt 0 ]]; then
    # modifiedが存在する場合は元の色を打ち消してredにする
    hook_com[unstaged]="%f%F{red}"
    hook_com[misc]+="%F{red}M: $modified_count%f "
  else
    hook_com[misc]+="M: $staged_count "
  fi

  if [[ untracked_count -gt 0 ]]; then
    # untrackedが存在する場合は元の色を打ち消してredにする
    hook_com[unstaged]="%f%F{red}"
    hook_com[misc]+="%F{red}U: $untracked_count%f"
  else
    hook_com[misc]+="U: $staged_count"
  fi
}

## zstyle
# vcs_info
zstyle ':vcs_info:*' enable git hg                                                     # git,hgを有効
zstyle ':vcs_info:*' max-exports 2                                                     # ${vcs_info_msg_0_},${vcs_info_msg_1_}にメッセージをエクスポート
zstyle ':vcs_info:*' formats '%s][* %F{cyan}%b%f'                                      # 通常時のフォーマット
zstyle ':vcs_info:*' actionformats '%s][* %F{cyan}%b%f(%F{magenta}%a%f)'               # コンフリクト時など,アクションがある場合のフォーマット
zstyle ':vcs_info:git:*' formats '%s][* %F{cyan}%u%c%b%f' '%m'                         # gitの通常時のフォーマット(引数1つ目vcs_info_msg_0_,2つ目vcs_info_msg_1_)
zstyle ':vcs_info:git:*' actionformats '%s][* %F{cyan}%u%c%b%f(%F{magenta}%a%f)' '%m'  # gitのコンフリクト時など,アクションがある場合のフォーマット(引数1つ目vcs_info_msg_0_,2つ目vcs_info_msg_1_)
zstyle ':vcs_info:git+set-message:*' hooks git-hook-begin git-vcs-info-msg-setting  # gitのファイル状態をhook_comに格納
# chpwd
zstyle ":chpwd:*" recent-dirs-max 100                                  # 最近利用したディレクトリ最大保存数
zstyle ":chpwd:*" recent-dirs-default true                             # 2つ以上の引数または数値以外の引数が与えられた場合,cdと同じ動作をする
zstyle ":completion:*" recent-dirs-insert always                       # recent-dirs-default trueの場合に補完を開始するとディレクトリ名一覧になる
# completion
zstyle ':completion:*' completer _complete _match _ignored _prefix     # コンプリータ指定(通常,パターンマッチ,除外パターン復活,単語途中の補完)
zstyle ':completion:*' menu select interactive                         # menuselect+interactive-mode(補完全般共通)
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}                  # 補完候補色付け

## prompt
# プロンプト表示
PROMPT='%{[38;5;33m%}_%{[0m%}
%{[38;5;33m%}┃%{[0m%}[${vcs_info_msg_0_}]:%~/
%{[38;5;33m%}┗━%{[0m%}(%?)$PROMPT_VIM_MODE_COLOR%#%{[0m%} '
RPROMPT='(${vcs_info_msg_1_})%{[38;5;33m%}━%{[0m%}[%D{%T}|%n]'

## command-line
# 色定義
zle_highlight=(region:standout special:standout suffix:bold isearch:bg=magenta,fg=white)

# vim: ft=zsh
