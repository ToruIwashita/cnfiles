## MYSQLç”¨functions
function my_check_argv() {
  if [ $# -lt 1 ]; then
    print "lack of arguments."
    return 1
  fi

  if [ $1:e != "sql" ]; then
    print "invalid extension."
    return 1
  fi

  return 0
}

function mq() {
  local my_cmd

  my_check_argv $argv
  if [ $? -eq 1 ]; then
    return 1
  fi

  my_cmd="cat $1"
  for ((i=1; i<$#; i++)); do
    arg_num=`expr $i + 1`
    my_cmd=$my_cmd" | sed -e 's/\${$i}/${argv[arg_num]}/g'"
  done

  print "<<Q"
  eval $my_cmd
  print "Q\n"

  my_cmd=$my_cmd" | xargs -0 -i mysql test -e '{}'"
  print "command: ${my_cmd}\n"
  eval $my_cmd
}

function mqout() {
  local my_cmd

  my_check_argv $argv
  if [ $? -eq 1 ]; then
    return 1
  fi

  my_cmd="cat $1"
  for ((i=1; i<$#; i++)); do
    arg_num=`expr $i + 1`
    my_cmd=$my_cmd" | sed -e 's/\${$i}/${argv[arg_num]}/g'"
  done

  print "<<Q"
  eval $my_cmd
  print "Q\n"

  my_cmd=$my_cmd" | xargs -0 -i mysql test -e '{}' -N | sed -e 's/\t/,/g' >! ~/works/tmp.txt"
  print "command: ${my_cmd}\n"
  eval $my_cmd
}

function myfindg() {
  local my_cmd
  local my_cmd_res_field_list
  local my_cmd_res_field_name
  local my_table_name
  local my_field_name
  local my_tmp_line

  while getopts :t:f: arg; do
    case ${arg} in
      f) my_field_name=${OPTARG} ;;
      t) my_table_name=${OPTARG} ;;
      :|\?) print "Usage: $0 [-f field] [-t table]"; return 2 ;;
    esac
  done

  my_tmp_line="-------------------------------------------------------"
  my_cmd="mysql test -e"
  if [ ${#my_table_name} -gt 0 ] && [ ${#my_field_name} -gt 0 ]; then
    print "Field\tType\tNull\tKey\tDefault\tExtra\n${my_tmp_line}"
    eval $my_cmd" 'DESC ${my_table_name}' -N | grep --color '${my_field_name}'"
  elif [ ${#my_table_name} -gt 0 ]; then
    print "Tables\n${my_tmp_line}"
    eval $my_cmd" 'SHOW TABLES' -N | grep --color '${my_table_name}'"
  elif [ ${#my_field_name} -gt 0 ]; then
    print "Table: 'name'\nField\tType\tNull\tKey\tDefault\tExtra\n${my_tmp_line}"
    for my_table_name in `eval $my_cmd" 'SHOW TABLES' -N"`; do
      my_cmd_res_field_list=`eval $my_cmd" 'DESC ${my_table_name}' -N | grep --color '${my_field_name}'"`
      if [ ${#my_cmd_res_field_list} -gt 0 ]; then
        print "Table: ${my_table_name}"
        for my_cmd_res_field_name in ${(f)my_cmd_res_field_list}; do
          print $my_cmd_res_field_name | grep --color "${my_field_name}"
        done
      fi
    done
  else
    eval $my_cmd" 'SHOW TABLES'"
  fi
}

function mqexp() {
  local my_cmd

  my_check_argv $argv
  if [ $? -eq 1 ]; then
    return 1
  fi

  my_cmd="cat $1"
  for ((i=1; i<$#; i++)); do
    arg_num=`expr $i + 1`
    my_cmd=$my_cmd" | sed -e 's/\${$i}/${argv[arg_num]}/g'"
  done

  print "<<Q"
  eval $my_cmd
  print "Q\n"

  my_cmd=$my_cmd" | xargs -0 -i mysql test -e 'EXPLAIN {}'"
  print "command: ${my_cmd}\n"
  eval $my_cmd
}

function mydesc() {
  if [ $# -lt 1 ]; then
    print "lack of arguments."
    return 1
  fi

  mysql test -e "DESC ${1}"
}

function myflist() {
  if [ $# -lt 1 ]; then
    print "lack of arguments."
    return 1
  fi

  echo ${(FR)${(f)"$(mysql test -e "DESC ${1}" -N)"}%%[[:blank:]]*}
}
