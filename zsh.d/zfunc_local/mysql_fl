## MYSQLç”¨functions
function my_check_argv() {
  if [ $# -lt 1 ]; then
    print "lack of arguments."
    return 1
  fi

  if [ $1:e != "sql" ]; then
    print "invalid extension."
    return 1
  fi

  return 0
}

function mq() {
  local my_cmd arg_num

  my_check_argv $argv
  if [ $? -eq 1 ]; then
    return 1
  fi

  my_cmd="cat $1"
  for ((i=1; i<$#; i++)); do
    arg_num=`expr $i + 1`
    my_cmd=$my_cmd" | sed -e 's/\${$i}/${argv[arg_num]}/g'"
  done

  print "<<Q"
  eval $my_cmd
  print "Q\n"

  my_cmd=$my_cmd" | xargs -0 -i ${MYSQL_CMD} '{}'"
  print "command: ${my_cmd}\n"
  eval $my_cmd
}

function mqout() {
  local my_cmd arg_num

  my_check_argv $argv
  if [ $? -eq 1 ]; then
    return 1
  fi

  my_cmd="cat $1"
  for ((i=1; i<$#; i++)); do
    arg_num=`expr $i + 1`
    my_cmd=$my_cmd" | sed -e 's/\${$i}/${argv[arg_num]}/g'"
  done

  print "<<Q"
  eval $my_cmd
  print "Q\n"

  my_cmd=$my_cmd" | xargs -0 -i ${MYSQL_CMD} '{}' -N | sed -e 's/\t/,/g' >! ~/works/tmp.txt"
  print "command: ${my_cmd}\n"
  eval $my_cmd
}

function myfindg() {
  local my_cmd my_cmd_res_field_list my_cmd_res_field_name my_table_name my_field_name my_tmp_line myfindg_usage arg

  myfindg_usage="Usage: $0 {-f 'Part of field info'|-t 'Part of table name'}"
  while getopts :f:t: arg; do
    case ${arg} in
      f) my_field_name=${OPTARG} ;;
      t) my_table_name=${OPTARG} ;;
      :|\?) print $myfindg_usage; return 1 ;;
    esac
  done

  my_tmp_line="-------------------------------------------------------"
  my_cmd=$MYSQL_CMD
  if [ ${#my_table_name} -gt 0 ] && [ ${#my_field_name} -gt 0 ]; then
    print "Field\tType\tNull\tKey\tDefault\tExtra\n${my_tmp_line}"
    eval $my_cmd" 'DESC ${my_table_name}' -N | grep --color '${my_field_name}'"
  elif [ ${#my_table_name} -gt 0 ]; then
    print "Tables\n${my_tmp_line}"
    eval $my_cmd" 'SHOW TABLES' -N | grep --color '${my_table_name}'"
  elif [ ${#my_field_name} -gt 0 ]; then
    print "Table: 'name'\nField\tType\tNull\tKey\tDefault\tExtra\n${my_tmp_line}"
    for my_table_name in `eval $my_cmd" 'SHOW TABLES' -N"`; do
      my_cmd_res_field_list=`eval $my_cmd" 'DESC ${my_table_name}' -N | grep --color '${my_field_name}'"`
      if [ ${#my_cmd_res_field_list} -gt 0 ]; then
        print "Table: ${my_table_name}"
        for my_cmd_res_field_name in ${(f)my_cmd_res_field_list}; do
          print $my_cmd_res_field_name | grep --color "${my_field_name}"
        done
      fi
    done
  else
    print $myfindg_usage
  fi
}

function mqexp() {
  local my_cmd arg_num

  my_check_argv $argv
  if [ $? -eq 1 ]; then
    return 1
  fi

  my_cmd="cat $1"
  for ((i=1; i<$#; i++)); do
    arg_num=`expr $i + 1`
    my_cmd=$my_cmd" | sed -e 's/\${$i}/${argv[arg_num]}/g'"
  done

  print "<<Q"
  eval $my_cmd
  print "Q\n"

  my_cmd=$my_cmd" | xargs -0 -i ${MYSQL_CMD} 'EXPLAIN {}\G'"
  print "command: ${my_cmd}\n"
  eval $my_cmd
}

function mydesc() {
  if [ $# -lt 1 ]; then
    print "lack of arguments."
    return 1
  fi

  eval "${MYSQL_CMD} 'DESC ${1}'"
}

function myindex() {
  if [ $# -lt 1 ]; then
    print "lack of arguments."
    return 1
  fi

  eval "${MYSQL_CMD} 'SHOW INDEX FROM ${1}'"
}

function myfcsv() {
  if [ $# -lt 1 ]; then
    print "lack of arguments."
    return 1
  fi

  eval "${MYSQL_CMD} 'DESC ${1}' -N | sed -e 's/\t.*//g' | xargs echo | sed -e 's/ /,/g'"
}

function myfirst() {
  local myfirst_usage

  myfirst_usage="Usage: $0 {Table name}"
  if [ $# -ne 1 ]; then
    print $myfirst_usage
    return 1
  fi

  print "${MYSQL_CMD} 'SELECT * FROM ${1} ORDER BY '"
}
