## git関連関数
function ga() {
  local ga_usage arg
  local -a add_files

  ga_usage="Usage: $0 {File|-m 'File'|-u 'File'}"
  while getopts :m:u: arg; do
    case ${arg} in
      m) add_files=($add_files $OPTARG) ;;
      u) add_files=($add_files $OPTARG) ;;
      :|\?) print $ga_usage; return 1 ;;
    esac
  done

  shift $((OPTIND-1))
  if [ -z "$add_files" -a $# -lt 1 ]; then
    print $ga_usage
    return 1
  fi

  git add $add_files $*
}

function gd() {
  local gd_usage arg diff_file

  gd_usage="Usage: $0 {File|-m 'File'}"
  while getopts :m: arg; do
    case ${arg} in
      m) diff_file=$OPTARG ;;
      :|\?) print $gd_usage; return 1 ;;
    esac
  done

  shift $((OPTIND-1))
  if [ -z "$diff_file" -a $# -lt 1 ]; then
    print $gd_usage
    return 1
  fi

  git diff $diff_file $*
}

function gcout() {
  local gcout_usage arg checkout_target

  gcout_usage="Usage: $0 {File|Branch|-m 'File'|-b 'Branch'}"
  while getopts :m:b: arg; do
    case ${arg} in
      m) checkout_target=$OPTARG ;;
      b) checkout_target=$OPTARG ;;
      :|\?) print $gcout_usage; return 1 ;;
    esac
  done

  shift $((OPTIND-1))
  if [ -z "$checkout_target" -a $# -lt 1 ]; then
    print $gcout_usage;
    return 1
  fi

  git checkout $checkout_target $*
}
