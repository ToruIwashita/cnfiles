""" NERDTree open,close
noremap <C-w>_ :NERDTreeToggle<CR>
" 引数なしVim実行時にNERDTree
if has('vim_starting') && expand("%:p") == ""
  autocmd VimEnter * NERDTree
endif

""" neocomplcache
" neocomplcacheを起動時に有効化
let g:neocomplcache_enable_at_startup = 1
" シンタックスをキャッシュするときの最小文字長
let g:neocomplcache_min_syntax_length = 3
" ポップアップメニューで表示される候補の数
let g:neocomplcache_max_list = 30
" 手動補完時に補完を行う入力数
let g:neocomplcache_manual_completion_start_length = 2
" 補完候補検索時に大文字・小文字を無視する
let g:neocomplcache_enable_ignore_case = 1
" 大文字が入力されるまで大文字小文字の区別を無視
let g:neocomplcache_enable_smart_case = 1
" オムニ補完の関数を呼び出しキーワードパターン設定(初期化)
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
" オムニ補完の関数を呼び出しキーワードパターン設定(ruby用)
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

""" neocomplcache key-mappings
" Ctr+Jで補完候補確定
inoremap <expr><C-j> neocomplcache#close_popup()
" Ctr+Gで補完キャンセル&ポップアップを閉じる
inoremap <expr><C-g> neocomplcache#cancel_popup()

""" neosnippet key-mappings
" Ctr+Kでスニペット展開&ターゲット移動
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

""" QuickBuf
let g:qb_hotkey = "__"

""" lightline
" Gitブランチ表示などはデフォルト空文字
let g:lightline = {
  \ 'colorscheme': 'Tomorrow',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component': {
  \   'readonly': '%{&filetype=="help"?"":&readonly?"RO":""}',
  \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
  \   'fugitive': '%{exists("*fugitive#head")?fugitive#head()!=""?"* ".fugitive#head():"":""}'
  \ },
  \ 'component_visible_condition': {
  \   'readonly': '(&filetype!="help"&& &readonly)',
  \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
  \   'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
  \ }
\ }

""" visualstar
" visualstarで検索した後に移動しない
map * <Plug>(visualstar-*)N
map # <Plug>(visualstar-#)N

""" Align
" 全角文字のハンドリング
let g:Align_xstrlen = 3
" GUIのメニュー表示(不要な場合は空文字を入れる)
let g:DrChipTopLvlMenu = ''

""" yankring
" yankring_historyの保存先を指定
let g:yankring_history_dir = '~/.vim/'
" 記録する最大数
let g:yankring_max_history = 30
" YRShowの最大表示数
let g:yankring_max_display = 30
" yankring_historyの重複テキストを保存しない
let g:yankring_ignore_duplicate = 0

